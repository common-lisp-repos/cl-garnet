\input texinfo  @c -*-texinfo-*-
@c %**start of header

@settitle Garnet Reference and User Manual

@include garnetver.texi

@c %**end of header

@c See two-volume-cross-refs.txt.

@include garnetver.texi



@c Combine indices.
@synindex cp fn
@syncodeindex vr fn
@syncodeindex ky fn
@syncodeindex pg fn
@c We use the "type index" to index new functions and variables.
@c @syncodeindex tp fn

@c When printing, define VERSION to be the printed edition number and
@c DATE to be the printed edition's date.  E.g., run the shell command
@c "texi2any -D 'VERSION 3.2' -D 'DATE 31 March 2020'".  This relates
@c mainly to the published book sold by the FSF.

@copying
@ifset VERSION
This is edition @value{VERSION} of the @cite{GNU Emacs Lisp Reference Manual},@*
@end ifset
@ifclear VERSION
This is the @cite{Garnet Reference and User manual}
@end ifclear
corresponding to Emacs version @value{GARNETVER}.

Copyright @copyright{} 19xx--2020
Inc.

@end copying

@dircategory Garnet
@direntry
* Garnet: (garnet).               Garnet.
@end direntry

@titlepage
@title Garnet Reference and User Manual
@subtitle For Emacs Version @value{EMACSVER}
@subtitle Revision @value{VERSION}, @value{DATE}

@page
@vskip 0pt plus 1filll
@insertcopying

@sp 2

@sp 2
@end titlepage


@c Print the tables of contents
@summarycontents
@contents


@ifnottex
@node Top
@top Emacs Lisp


@insertcopying
@end ifnottex

@menu
* Introduction::            Introduction and conventions used.

* Lisp Data Types::         Data types of objects in Emacs Lisp.
* Numbers::                 Numbers and arithmetic functions.
* Strings and Characters::  Strings, and functions that work on them.
* Lists::                   Lists, cons cells, and related functions.
* Sequences Arrays Vectors::  Lists, strings and vectors are called sequences.
                                Certain functions act on any kind of sequence.
                                The description of vectors is here as well.
* Records::                 Compound objects with programmer-defined types.
* Hash Tables::             Very fast lookup-tables.
* Symbols::                 Symbols represent names, uniquely.

* Evaluation::              How Lisp expressions are evaluated.
* Control Structures::      Conditionals, loops, nonlocal exits.
* Variables::               Using symbols in programs to stand for values.
* Functions::               A function is a Lisp program
                              that can be invoked from other functions.
* Macros::                  Macros are a way to extend the Lisp language.
* Customization::           Making variables and faces customizable.

* Loading::                 Reading files of Lisp code into Lisp.
* Byte Compilation::        Compilation makes programs run faster.
* Debugging::               Tools and tips for debugging Lisp programs.

* Read and Print::          Converting Lisp objects to text and back.
* Minibuffers::             Using the minibuffer to read input.
* Command Loop::            How the editor command loop works,
                              and how you can call its subroutines.
* Keymaps::                 Defining the bindings from keys to commands.
* Modes::                   Defining major and minor modes.
* Documentation::           Writing and using documentation strings.

* Files::                   Accessing files.
* Backups and Auto-Saving:: Controlling how backups and auto-save
                              files are made.
* Buffers::                 Creating and using buffer objects.
* Windows::                 Manipulating windows and displaying buffers.
* Frames::                  Making multiple system-level windows.
* Positions::               Buffer positions and motion functions.
* Markers::                 Markers represent positions and update
                              automatically when the text is changed.

* Text::                    Examining and changing text in buffers.
* Non-ASCII Characters::    Non-ASCII text in buffers and strings.
* Searching and Matching::  Searching buffers for strings or regexps.
* Syntax Tables::           The syntax table controls word and list parsing.
* Abbrevs::                 How Abbrev mode works, and its data structures.

* Threads::                 Concurrency in Emacs Lisp.
* Processes::               Running and communicating with subprocesses.
* Display::                 Features for controlling the screen display.
* System Interface::        Getting the user id, system type, environment
                              variables, and other such things.

* Packaging::               Preparing Lisp code for distribution.

Appendices

* Antinews::                Info for users downgrading to Emacs 26.
* GNU Free Documentation License:: The license for this documentation.
* GPL::                     Conditions for copying and changing GNU Emacs.
* Tips::                    Advice and coding conventions for Emacs Lisp.
* GNU Emacs Internals::     Building and dumping Emacs;
                              internal data structures.
* Standard Errors::         List of some standard error symbols.
* Standard Keymaps::        List of some standard keymaps.
* Standard Hooks::          List of some standard hook variables.

* Index::                   Index including concepts, functions, variables,
                              and other terms.

@ignore
* New Symbols::             New functions and variables in Emacs @value{EMACSVER}.
@end ignore

@c Do NOT modify the following 3 lines!  They must have this form to
@c be correctly identified by 'texinfo-multiple-files-update'.  In
@c particular, the detailed menu header line MUST be identical to the
@c value of 'texinfo-master-menu-header'.  See texnfo-upd.el.

@detailmenu
 --- The Detailed Node Listing ---
 ---------------------------------

Here are other nodes that are subnodes of those already listed,
mentioned here so you can get to them in one step:

Modifying Existing List Structure

* Setcar::                  Replacing an element in a list.
* Setcdr::                  Replacing part of the list backbone.
                              This can be used to remove or add elements.
* Rearrangement::           Reordering the elements in a list; combining lists.

Property Lists

* Plists and Alists::       Comparison of the advantages of property
                              lists and association lists.
* Plist Access::            Accessing property lists stored elsewhere.

Sequences, Arrays, and Vectors

* Sequence Functions::      Functions that accept any kind of sequence.
* Arrays::                  Characteristics of arrays in Emacs Lisp.
* Array Functions::         Functions specifically for arrays.
* Vectors::                 Special characteristics of Emacs Lisp vectors.
* Vector Functions::        Functions specifically for vectors.
* Char-Tables::             How to work with char-tables.
* Bool-Vectors::            How to work with bool-vectors.
* Rings::                   Managing a fixed-size ring of objects.

Records

* Record Functions::        Functions for records.
* Backward Compatibility::  Compatibility for cl-defstruct.

Hash Tables

* Creating Hash::           Functions to create hash tables.
* Hash Access::             Reading and writing the hash table contents.
* Defining Hash::           Defining new comparison methods.
* Other Hash::              Miscellaneous.

Symbols

* Symbol Components::       Symbols have names, values, function definitions
                              and property lists.
* Definitions::             A definition says how a symbol will be used.
* Creating Symbols::        How symbols are kept unique.
* Symbol Properties::       Each symbol has a property list
                              for recording miscellaneous information.

Symbol Properties

* Symbol Plists::           Accessing symbol properties.
* Standard Properties::     Standard meanings of symbol properties.

Lambda Expressions

* Lambda Components::       The parts of a lambda expression.
* Simple Lambda::           A simple example.
* Argument List::           Details and special features of argument lists.
* Function Documentation::  How to put documentation in a function.

Advising Emacs Lisp Functions

* Core Advising Primitives::  Primitives to manipulate advice.
* Advising Named Functions::  Advising named functions.
* Advice Combinators::        Ways to compose advice.
* Porting Old Advice::        Adapting code using the old defadvice.

Macros

* Simple Macro::            A basic example.
* Expansion::               How, when and why macros are expanded.
* Compiling Macros::        How macros are expanded by the compiler.
* Defining Macros::         How to write a macro definition.
* Problems with Macros::    Don't evaluate the macro arguments too many times.
                              Don't hide the user's variables.
* Indenting Macros::        Specifying how to indent macro calls.

Common Problems Using Macros

* Wrong Time::             Do the work in the expansion, not in the macro.
* Argument Evaluation::    The expansion should evaluate each macro arg once.
* Surprising Local Vars::  Local variable bindings in the expansion
                              require special care.
* Eval During Expansion::  Don't evaluate them; put them in the expansion.
* Repeated Expansion::     Avoid depending on how many times expansion is done.

Customization Settings

* Common Keywords::         Common keyword arguments for all kinds of
                              customization declarations.
* Group Definitions::       Writing customization group definitions.
* Variable Definitions::    Declaring user options.
* Customization Types::     Specifying the type of a user option.
* Applying Customizations:: Functions to apply customization settings.
* Custom Themes::           Writing Custom themes.


Object Internals

* Buffer Internals::        Components of a buffer structure.
* Window Internals::        Components of a window structure.
* Process Internals::       Components of a process structure.
@end detailmenu
@end menu

@include kr-manual.texi

@include aggregadgets-manual.texi
@c @include objects.texi
@c @include numbers.texi
@c @include strings.texi

@c @include lists.texi
@c @include sequences.texi
@c @include records.texi
@c @include hash.texi
@c @include symbols.texi
@c @include eval.texi

@c @include control.texi
@c @include variables.texi
@c @include functions.texi
@c @include macros.texi

@c @include customize.texi
@c @include loading.texi
@c @include compile.texi

@c This includes edebug.texi.
@c @include debugging.texi
@c @include streams.texi
@c @include minibuf.texi
@c @include commands.texi

@c @include keymaps.texi
@c @include modes.texi
@c @include help.texi
@c @include files.texi

@c @include backups.texi



@c @include buffers.texi
@c @include windows.texi
@c @include frames.texi

@c @include positions.texi
@c @include markers.texi
@c @include text.texi
@c @include nonascii.texi

@c @include searching.texi
@c @include syntax.texi
@c @include abbrevs.texi
@c @include threads.texi
@c @include processes.texi

@c @include display.texi
@c @include os.texi

@c @include package.texi

@c appendices

@c @include anti.texi
@node GNU Free Documentation License
@appendix GNU Free Documentation License
@c @include doclicense.texi
@node GPL
@appendix GNU General Public License
@c @include gpl.texi
@c @include tips.texi
@c @include internals.texi
@c @include errors.texi
@c @include maps.texi
@c @include hooks.texi

@include index.texi



@ignore
@node New Symbols
@unnumbered New Symbols Since the Previous Edition

@printindex tp
@end ignore

@bye

